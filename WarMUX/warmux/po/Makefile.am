# Example for use of GNU gettext.
# Copyright (C) 2003 Free Software Foundation, Inc.
# This file is in the public domain.
#
# Makefile configuration - processed by automake.
#

#MAINTAINERCLEANFILES = Makefile.in
MAINTAINERCLEANFILES =

POTFILES = \
        lib/warmux/net/download.cpp \
        src/character/body.cpp \
        src/character/body_list.cpp \
        src/character/character.cpp \
        src/character/clothe.cpp \
        src/character/damage_stats.cpp \
        src/character/member.cpp \
        src/character/movement.cpp \
        src/game/config.cpp \
        src/game/game_blitz.cpp \
        src/game/game_classic.cpp \
        src/game/game.cpp \
        src/game/game_mode.cpp \
        src/game/time.cpp \
        src/graphic/color.cpp \
        src/graphic/composite_shape.cpp \
        src/graphic/font.cpp \
        src/graphic/fps.cpp \
        src/graphic/polygon.cpp \
        src/graphic/polygon_generator.cpp \
        src/graphic/spriteanimation.cpp \
        src/graphic/spritecache.cpp \
        src/graphic/sprite.cpp \
        src/graphic/surface.cpp \
        src/graphic/text.cpp \
        src/graphic/text_list.cpp \
        src/graphic/video.cpp \
        src/gui/abstract_spin_button.cpp \
        src/gui/big/button_pic.cpp \
        src/gui/grid_box.cpp \
        src/gui/vertical_box.cpp \
        src/gui/horizontal_box.cpp \
        src/gui/box.cpp \
        src/gui/button.cpp \
        src/gui/button_text.cpp \
        src/gui/check_box.cpp \
        src/gui/combo_box.cpp \
        src/gui/control_config.cpp \
        src/gui/energy_bar.cpp \
        src/gui/label.cpp \
        src/gui/msg_box.cpp \
        src/gui/picture_text_cbox.cpp \
        src/gui/picture_widget.cpp \
        src/gui/progress_bar.cpp \
        src/gui/question.cpp \
        src/gui/spin_button.cpp \
        src/gui/spin_button_picture.cpp \
        src/gui/tabs.cpp \
        src/gui/talk_box.cpp \
        src/gui/text_box.cpp \
        src/gui/widget.cpp \
        src/gui/widget_list.cpp \
        src/include/action_handler.cpp \
        src/include/constant.cpp \
        src/interface/cursor.cpp \
        src/interface/game_msg.cpp \
        src/interface/interface.cpp \
        src/interface/joystick.cpp \
        src/interface/keyboard.cpp \
        src/interface/loading_screen.cpp \
        src/interface/man_machine_interface.cpp \
        src/interface/mouse.cpp \
        src/interface/mouse_cursor.cpp \
        src/interface/weapon_menu.cpp \
        src/main.cpp \
        src/map/camera.cpp \
        src/map/ground.cpp \
        src/map/map.cpp \
        src/map/maps_list.cpp \
        src/map/random_map.cpp \
        src/map/sky.cpp \
        src/map/tile.cpp \
        src/map/tileitem.cpp \
        src/map/water.cpp \
        src/map/wind.cpp \
        src/menu/benchmark_menu.cpp \
        src/menu/credits_menu.cpp \
        src/menu/game_menu.cpp \
        src/menu/game_mode_editor.cpp \
        src/menu/help_menu.cpp \
        src/menu/main_menu.cpp \
        src/menu/map_selection_box.cpp \
        src/menu/menu.cpp \
        src/menu/network_connection_menu.cpp \
        src/menu/network_menu.cpp \
        src/menu/network_teams_selection_box.cpp \
        src/menu/options_menu.cpp \
        src/menu/pause_menu.cpp \
        src/menu/replay_menu.cpp \
        src/menu/results_menu.cpp \
        src/menu/team_box.cpp \
        src/menu/teams_selection_box.cpp \
        src/network/admin_commands.cpp \
        src/network/chat.cpp \
        src/network/chatlogger.cpp \
        src/network/net_error_msg.cpp \
        src/network/network_client.cpp \
        src/network/network.cpp \
        src/network/network_local.cpp \
        src/network/network_server.cpp \
        src/network/randomsync.cpp \
        src/object/barrel.cpp \
        src/object/bonus_box.cpp \
        src/object/medkit.cpp \
        src/object/objbox.cpp \
        src/object/object_cfg.cpp \
        src/object/objects_list.cpp \
        src/object/physical_obj.cpp \
        src/object/physics.cpp \
        src/particles/body_member.cpp \
        src/particles/bullet.cpp \
        src/particles/dark_smoke.cpp \
        src/particles/explosion_smoke.cpp \
        src/particles/fading_text.cpp \
        src/particles/fire.cpp \
        src/particles/ground_particles.cpp \
        src/particles/ill_bubble.cpp \
        src/particles/magic_star.cpp \
        src/particles/particle.cpp \
        src/particles/polecat_fart.cpp \
        src/particles/smoke.cpp \
        src/particles/star.cpp \
        src/particles/teleport_member.cpp \
        src/particles/water_drop.cpp \
        src/sound/jukebox.cpp \
        src/sound/sample_cache.cpp \
        src/sound/sound_sample.cpp \
        src/team/custom_team.cpp \
        src/team/custom_teams_list.cpp \
        src/team/results.cpp \
        src/team/team.cpp \
        src/team/team_energy.cpp \
        src/team/teams_list.cpp \
        src/tool/affine_transform.cpp \
        src/tool/copynpaste.cpp \
        src/tool/resource_manager.cpp \
        src/tool/stats.cpp \
        src/tool/string_tools.cpp \
        src/tool/text_handling.cpp \
        src/tool/xml_document.cpp \
        src/weapon/air_attack.cpp \
        src/weapon/airhammer.cpp \
        src/weapon/anvil.cpp \
        src/weapon/auto_bazooka.cpp \
        src/weapon/baseball.cpp \
        src/weapon/bazooka.cpp \
        src/weapon/blowtorch.cpp \
        src/weapon/bounce_ball.cpp \
        src/weapon/cluster_bomb.cpp \
        src/weapon/cluzooka.cpp \
        src/weapon/construct.cpp \
        src/weapon/crosshair.cpp \
        src/weapon/disco_grenade.cpp \
        src/weapon/dynamite.cpp \
        src/weapon/explosion.cpp \
        src/weapon/flamethrower.cpp \
        src/weapon/footbomb.cpp \
        src/weapon/gnu.cpp \
        src/weapon/grapple.cpp \
        src/weapon/grenade.cpp \
        src/weapon/gun.cpp \
        src/weapon/jetpack.cpp \
        src/weapon/lowgrav.cpp \
        src/weapon/mine.cpp \
        src/weapon/parachute.cpp \
        src/weapon/polecat.cpp \
        src/weapon/rail_gun.cpp \
        src/weapon/riot_bomb.cpp \
        src/weapon/shotgun.cpp \
        src/weapon/skip_turn.cpp \
        src/weapon/slap.cpp \
        src/weapon/snipe_rifle.cpp \
        src/weapon/submachine_gun.cpp \
        src/weapon/suicide.cpp \
        src/weapon/supertux.cpp \
        src/weapon/syringe.cpp \
        src/weapon/teleportation.cpp \
        src/weapon/weapon_cfg.cpp \
        src/weapon/weapon.cpp \
        src/weapon/weapon_launcher.cpp \
        src/weapon/weapons_list.cpp \
        src/weapon/weapon_strength_bar.cpp \
        tools/servers/game_server/config.cpp \
        tools/servers/game_server/main.cpp \
        tools/servers/game_server/server.cpp \
        tools/servers/index_server/client.cpp \
        tools/servers/index_server/clock.cpp \
        tools/servers/index_server/config.cpp \
        tools/servers/index_server/download.cpp \
        tools/servers/index_server/main.cpp \
        tools/servers/index_server/net_data.cpp \
        tools/servers/index_server/server.cpp \
        tools/servers/index_server/stat.cpp \
        tools/servers/index_server/sync_slave.cpp

DOMAIN = $(PACKAGE)

COPYRIGHT_HOLDER = Warmux Development Team

MSGID_BUGS_ADDRESS = warmux-dev@gna.org

localedir=@LOCALEDIR@

XGETTEXT = @XGETTEXT@
# add as automated comments all strings preceeding the gettexized line
# since it seems that in most cases the comments are useful
XGETTEXT_OPTIONS = -c --keyword=_ --keyword=N_
MSGMERGE = @MSGMERGE@
MSGMERGE_UPDATE = @MSGMERGE@ --quiet --update --previous
MSGINIT = @MSGINIT@
MSGCONV = @MSGCONV@
MSGFILTER = @MSGFILTER@

# This is computed as $(foreach file, $(POTFILES), $(top_srcdir)/$(file))
POTFILES_DEPS = @POTFILES_DEPS@

# This is computed as $(foreach lang, $(LINGUAS), $(srcdir)/$(lang).po)
POFILES = @POFILES@
# This is computed as $(foreach lang, $(LINGUAS), $(srcdir)/$(lang).gmo)
GMOFILES = @GMOFILES@
# This is computed as $(foreach lang, $(LINGUAS), $(lang).po-update)
UPDATEPOFILES = @UPDATEPOFILES@
# This is computed as $(foreach lang, $(LINGUAS), $(lang).nop)
DUMMYPOFILES = @DUMMYPOFILES@

# This is computed as
# $(foreach lang, user-specified subset of $(LINGUAS), $(lang).gmo)
CATALOGS = @CATALOGS@

SUFFIXES = .po .gmo .mo .sed .sin .nop .po-update

.po.gmo:
	@lang=`echo $* | sed -e 's,.*/,,'`; \
	test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
	echo "Create $${lang}.gmo"; \
	cd $(srcdir) && rm -f $${lang}.gmo && $(GMSGFMT) -c -o t-$${lang}.gmo $${lang}.po && mv t-$${lang}.gmo $${lang}.gmo

.sin.sed:
	@echo "Create $@ file"
	@sed -e '/^#/d' $< > t-$@
	@mv t-$@ $@


all-local: all-local-@USE_NLS@

all-local-yes: $(GMOFILES)
all-local-no:

# stamp-po is a timestamp denoting the last time at which the CATALOGS have
# been loosely updated. Its purpose is that when a developer or translator
# checks out the package via CVS, and the $(DOMAIN).pot file is not in CVS,
# "make" will update the $(DOMAIN).pot and the $(CATALOGS), but subsequent
# invocations of "make" will do nothing. This timestamp would not be necessary
# if updating the $(CATALOGS) would always touch them; however, the rule for
# $(POFILES) has been designed to not touch files that don't need to be
# changed.
stamp-po: $(srcdir)/$(DOMAIN).pot
	test -z "$(GMOFILES)" || $(MAKE) $(GMOFILES)
	@echo "touch stamp-po"
	@echo timestamp > stamp-poT
	@mv stamp-poT stamp-po

# Note: Target 'all' must not depend on target '$(DOMAIN).pot-update',
# otherwise packages like GCC can not be built if only parts of the source
# have been downloaded.

# This target rebuilds $(DOMAIN).pot; it is an expensive operation.
# Note that $(DOMAIN).pot is not touched if it doesn't need to be changed.
$(DOMAIN).pot-update: $(POTFILES_DEPS)
	@echo "Create $(DOMAIN).pot"
	@$(XGETTEXT) \
	  -o $(DOMAIN).pot -s --from-code iso-8859-1 \
	  --default-domain=$(DOMAIN) --directory=$(top_srcdir) \
	  $(XGETTEXT_OPTIONS) \
	  --copyright-holder='$(COPYRIGHT_HOLDER)' \
	  --msgid-bugs-address='$(MSGID_BUGS_ADDRESS)' \
	  $(POTFILES)
	@test ! -f $(DOMAIN).po || { \
	  if test -f $(srcdir)/$(DOMAIN).pot; then \
	    sed -e '/^"POT-Creation-Date:/D' < $(srcdir)/$(DOMAIN).pot > $(DOMAIN).1po && \
	    sed -e '/^"POT-Creation-Date:/D' < $(DOMAIN).po > $(DOMAIN).2po && \
	    if cmp $(DOMAIN).1po $(DOMAIN).2po >/dev/null 2>&1; then \
	      rm -f $(DOMAIN).1po $(DOMAIN).2po $(DOMAIN).po; \
	    else \
	      rm -f $(DOMAIN).1po $(DOMAIN).2po $(srcdir)/$(DOMAIN).pot && \
	      mv $(DOMAIN).po $(srcdir)/$(DOMAIN).pot; \
	    fi; \
	  else \
	    mv $(DOMAIN).po $(srcdir)/$(DOMAIN).pot; \
	  fi; \
	}

# This rule has no dependencies: we don't need to update $(DOMAIN).pot at
# every "make" invocation, only create it when it is missing.
# Only "make $(DOMAIN).pot-update" or "make dist" will force an update.
$(srcdir)/$(DOMAIN).pot:
	$(MAKE) $(DOMAIN).pot-update

# This target rebuilds a PO file if $(DOMAIN).pot has changed.
# Note that a PO file is not touched if it doesn't need to be changed.
$(POFILES): $(srcdir)/$(DOMAIN).pot
	@lang=`echo $@ | sed -e 's,.*/,,' -e 's/\.po$$//'`; \
	test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
	echo "Update $${lang}.po"; \
	cd $(srcdir) && $(MSGMERGE_UPDATE) $${lang}.po $(DOMAIN).pot && \
	sed -e '/^"POT-Creation-Date:/D' <$${lang}.po >t-$${lang}.po && \
	mv -f t-$${lang}.po $${lang}.po


install-data-local: install-data-local-@USE_NLS@
install-data-local-no: all-local
install-data-local-yes: all-local
	$(mkinstalldirs) $(DESTDIR)$(datadir)
	for cat in $(CATALOGS); do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
	  dir=$(localedir)/$$lang/LC_MESSAGES; \
	  $(mkinstalldirs) $(DESTDIR)$$dir; \
	  if test -r $$cat; then realcat=$$cat; else realcat=$(srcdir)/$$cat; fi; \
	  $(INSTALL_DATA) $$realcat $(DESTDIR)$$dir/$(DOMAIN).mo; \
	  echo "installing $$realcat as $(DESTDIR)$$dir/$(DOMAIN).mo"; \
	  for lc in '' $(EXTRA_LOCALE_CATEGORIES); do \
	    if test -n "$$lc"; then \
	      if (cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc 2>/dev/null) | grep ' -> ' >/dev/null; then \
	        link=`cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc | sed -e 's/^.* -> //'`; \
	        mv $(DESTDIR)$(localedir)/$$lang/$$lc $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
	        mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
	        (cd $(DESTDIR)$(localedir)/$$lang/$$lc.old && \
	         for file in *; do \
	           if test -f $$file; then \
	             ln -s ../$$link/$$file $(DESTDIR)$(localedir)/$$lang/$$lc/$$file; \
	           fi; \
	         done); \
	        rm -f $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
	      else \
	        if test -d $(DESTDIR)$(localedir)/$$lang/$$lc; then \
	          :; \
	        else \
	          rm -f $(DESTDIR)$(localedir)/$$lang/$$lc; \
	          mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
	        fi; \
	      fi; \
	      rm -f $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
	      ln -s ../LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo 2>/dev/null || \
	      ln $(DESTDIR)$(localedir)/$$lang/LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo 2>/dev/null || \
	      cp -p $(DESTDIR)$(localedir)/$$lang/LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
	      echo "installing $$realcat link as $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo"; \
	    fi; \
	  done; \
	done

installdirs-local: installdirs-local-@USE_NLS@
installdirs-local-no:
installdirs-local-yes:
	$(mkinstalldirs) $(DESTDIR)$(datadir)
	@catalogs='$(CATALOGS)'; \
	for cat in $$catalogs; do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
	  dir=$(localedir)/$$lang/LC_MESSAGES; \
	  $(mkinstalldirs) $(DESTDIR)$$dir; \
	  for lc in '' $(EXTRA_LOCALE_CATEGORIES); do \
	    if test -n "$$lc"; then \
	      if (cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc 2>/dev/null) | grep ' -> ' >/dev/null; then \
	        link=`cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc | sed -e 's/^.* -> //'`; \
	        mv $(DESTDIR)$(localedir)/$$lang/$$lc $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
	        mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
	        (cd $(DESTDIR)$(localedir)/$$lang/$$lc.old && \
	         for file in *; do \
	           if test -f $$file; then \
	             ln -s ../$$link/$$file $(DESTDIR)$(localedir)/$$lang/$$lc/$$file; \
	           fi; \
	         done); \
	        rm -f $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
	      else \
	        if test -d $(DESTDIR)$(localedir)/$$lang/$$lc; then \
	          :; \
	        else \
	          rm -f $(DESTDIR)$(localedir)/$$lang/$$lc; \
	          mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
	        fi; \
	      fi; \
	    fi; \
	  done; \
	done

uninstall-local: uninstall-local-@USE_NLS@
uninstall-local-no:
uninstall-local-yes:
	catalogs='$(CATALOGS)'; \
	for cat in $$catalogs; do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
	  for lc in LC_MESSAGES $(EXTRA_LOCALE_CATEGORIES); do \
	    rm -f $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
	  done; \
	done

html ID:

MOSTLYCLEANFILES =
MOSTLYCLEANFILES += stamp-poT
MOSTLYCLEANFILES += core core.* $(DOMAIN).po $(DOMAIN).1po $(DOMAIN).2po *.new.po
MOSTLYCLEANFILES += *.o *.gmo $(srcdir)/$(DOMAIN).pot *.*~

DISTCLEANFILES = *.mo *.gmo

MAINTAINERCLEANFILES += stamp-po $(GMOFILES)

EXTRA_DIST = LINGUAS $(DOMAIN).pot stamp-po $(POFILES)

# Hidden from automake, but really activated. Works around an automake-1.5 bug.
#distdir: distdir1
distdir1:
	$(MAKE) update-po

update-po: Makefile
	$(MAKE) $(DOMAIN).pot-update
	test -z "$(UPDATEPOFILES)" || $(MAKE) $(UPDATEPOFILES)
	$(MAKE) update-gmo

# General rule for updating PO files.

.nop.po-update:
	@lang=`echo $@ | sed -e 's/\.po-update$$//'`; \
	tmpdir=`pwd`; \
	echo "$$lang:"; \
	test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
	echo "$${cdcmd}$(MSGMERGE) $$lang.po $(DOMAIN).pot -o $$lang.new.po"; \
	cd $(srcdir); \
	if $(MSGMERGE) $$lang.po $(DOMAIN).pot -o $$tmpdir/$$lang.new.po; then \
	  if cmp $$lang.po $$tmpdir/$$lang.new.po >/dev/null 2>&1; then \
	    rm -f $$tmpdir/$$lang.new.po; \
	  else \
	    if mv -f $$tmpdir/$$lang.new.po $$lang.po; then \
	      :; \
	    else \
	      echo "msgmerge for $$lang.po failed: cannot move $$tmpdir/$$lang.new.po to $$lang.po" 1>&2; \
	      exit 1; \
	    fi; \
	  fi; \
	else \
	  echo "msgmerge for $$lang.po failed!" 1>&2; \
	  rm -f $$tmpdir/$$lang.new.po; \
	fi

$(DUMMYPOFILES):

update-gmo: Makefile $(GMOFILES)
	@:
